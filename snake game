import React, { useState, useEffect, useRef } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert } from 'react-native';
//

const CELL_SIZE = 20;
const GRID_SIZE = 15;

// posição inicial
const INITIAL_SNAKE = [{ x: 7, y: 7 }];

const INITIAL_DIRECTION = { x: 0, y: -1 };

export default function SnakeGame() {

    const [snake, SetSnake] = useState(INITIAL_SNAKE);

    const [direction, SetDirection] = useState(INITIAL_DIRECTION);
    const [isGameOver, setIsGameOver] = useState(false);
    const moveInterval = useRef(null);
    function moveSnake() {
        setSnake(prev => {
            const newHead = {

                x: prev[0].x + direction.x,
                y: prev[0].y + direction.y
            };

           
            if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE || newSnake.some(segment => segment.x === head.x && segment.y === head.y)) {
                setIsGameOver(true);
                clearInterval(moveInterval.current);
                Alert.alert("Fim de Jogo Meu Patrao", "Você Bateu na parede ou se mordeu!");
                return prev;
            }

            newSnake.unshift(head);
            newSnake.pop();
            return newSnake;
        });


    }
};
 cosnt newSnake = [newHead, ...prev];

newSnake.pop(); 

return newSnake;
});
}

useEffect (() => {
    moveInterval.current = setInterval (() => {
              if(!IsGameOver) moveSnake();
            },200)
return () => clearInterval (moveInterval,current);
}, [direction]);

const renderCell = (x,y) => {

cosnt isSnake = snake.some (cell => cell.x === x && cell.y ===y)

return(
  <view
       key={'${x}-${y}')
       style= {[styles.cell, isSnake && styles.snake]}
/>
  };
};

cosnt renderGrid = () =>{
  let rows = [];

for (let y = 0;y < Grid_Size; y++){
    let row = [];
    for (let x; x < Grid_Size; x++){
    row.push (renderCell(x,y));
  }
 row.push (<view key ={y}


